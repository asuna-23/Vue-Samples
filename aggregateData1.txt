///

// Mock data
const mock_data = [
  { datetime: '2025-01-22 00:00', actual: 20035, plan: 30000 },
  { datetime: '2025-01-22 01:00', actual: 23035, plan: 30000 },
  { datetime: '2025-01-22 02:00', actual: 30035, plan: 36000 },
  { datetime: '2025-01-23 00:00', actual: 25000, plan: 31000 },
  { datetime: '2025-01-24 00:00', actual: 27050, plan: 32000 },
  { datetime: '2025-01-25 00:00', actual: 19000, plan: 29000 },
  { datetime: '2025-01-26 00:00', actual: 31000, plan: 33000 },
  { datetime: '2025-01-27 00:00', actual: 28000, plan: 34000 },
  { datetime: '2025-01-28 00:00', actual: 26000, plan: 31000 },
  { datetime: '2025-01-29 00:00', actual: 45758, plan: 30000 },
  { datetime: '2025-01-30 00:00', actual: 24050, plan: 31000 },
  { datetime: '2025-01-31 00:00', actual: 29500, plan: 35000 },
  { datetime: '2025-02-01 00:00', actual: 35500, plan: 29500 },
  { datetime: '2025-02-02 00:00', actual: 27500, plan: 31500 },
  { datetime: '2025-02-03 00:00', actual: 28500, plan: 32000 },
  { datetime: '2025-02-04 00:00', actual: 35500, plan: 33000 },
  { datetime: '2025-02-04 01:00', actual: 24500, plan: 33000 },
  { datetime: '2025-02-04 02:00', actual: 35500, plan: 25000 }
];

// Function to aggregate data
function aggregateData(data, frequency) {
  const result = {};

  data.forEach(item => {
    const date = new Date(item.datetime);
    let key;

    if (frequency === 'hourly') {
      key = `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()} ${date.getHours()}:00`;
    } else if (frequency === 'daily') {
      key = `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`;
    } else if (frequency === 'monthly') {
      key = `${date.getFullYear()}-${date.getMonth() + 1}`;
    } else if (frequency === 'yearly') {
      key = `${date.getFullYear()}`;
    }

    if (!result[key]) {
      result[key] = { actual: 0, plan: 0 };
    }

    result[key].actual += item.actual;
    result[key].plan += item.plan;
  });

  return result;
}

// Get aggregated data for each timeframe
const hourlyData = aggregateData(mock_data, 'hourly');
const dailyData = aggregateData(mock_data, 'daily');
const monthlyData = aggregateData(mock_data, 'monthly');
const yearlyData = aggregateData(mock_data, 'yearly');

// Output the results for each
console.log('Hourly Data:', hourlyData);
console.log('Daily Data:', dailyData);
console.log('Monthly Data:', monthlyData);
console.log('Yearly Data:', yearlyData);


///// 


import { mock_data } from "@/mockData"; // import the mock data
import { aggregateData, getDateKey } from "@/utils"; // assuming these functions are in utils.js or elsewhere

export default {
  components: { SummaryCardButton },
  data() {
    return {
      selectedSummary: null,
      // Aggregated data for hourly, daily, monthly, yearly
      aggregatedSummaries: this.aggregateSummaries(mock_data)
    };
  },
  methods: {
    // Aggregation function
    aggregateSummaries(data) {
      const frequencyTypes = ["hourly", "daily", "monthly", "yearly"];
      const aggregatedData = {};

      frequencyTypes.forEach(frequency => {
        aggregatedData[frequency] = this.aggregateData(data, frequency);
      });

      return aggregatedData;
    },

    aggregateData(data, frequency) {
      return data.reduce((result, item) => {
        const key = getDateKey(item.datetime, frequency);
        if (!result[key]) {
          result[key] = { actual: 0, plan: 0 };
        }
        result[key].actual += item.actual;
        result[key].plan += item.plan;
        return result;
      }, {});
    },

    setActive(summary) {
      this.selectedSummary = summary;
    }
  }
};


//// aggregate data and get total each

import { mock_data } from "@/mockData"; // Import the mock data

export default {
  components: { SummaryCardButton },
  data() {
    return {
      selectedSummary: null,
      // Aggregated data for hourly, daily, monthly, yearly
      aggregatedSummaries: this.aggregateSummaries(mock_data)
    };
  },
  methods: {
    // Aggregation function
    aggregateSummaries(data) {
      const frequencyTypes = ["hourly", "daily", "monthly", "yearly"];
      const aggregatedData = {};

      frequencyTypes.forEach(frequency => {
        aggregatedData[frequency] = this.aggregateData(data, frequency);
      });

      return aggregatedData;
    },

    aggregateData(data, frequency) {
      const totals = { actual: 0, plan: 0 };

      data.forEach(item => {
        const key = this.getDateKey(item.datetime, frequency);
        totals.actual += item.actual;
        totals.plan += item.plan;
      });

      return totals; // Return the aggregated totals for each frequency
    },

    getDateKey(datetime, frequency) {
      const date = new Date(datetime);
      switch (frequency) {
        case "hourly":
          return date.getHours(); // Use hour as the key
        case "daily":
          return date.toISOString().split("T")[0]; // Use full date (YYYY-MM-DD) as key
        case "monthly":
          return `${date.getFullYear()}-${date.getMonth() + 1}`; // Use year-month as the key
        case "yearly":
          return date.getFullYear(); // Use year as the key
        default:
          return date;
      }
    },

    setActive(summary) {
      this.selectedSummary = summary;
    }
  }
};


--- optimize parent

<template>
  <div>
    <!-- Button List -->
    <div class="d-flex gap-3">
      <!-- Loop through the summary types (hourly, daily, monthly, yearly) -->
      <SummaryCardButton 
        v-for="(summary, index) in summaryTypes" 
        :key="index"
        :summary="getSummaryData(summary.key)"
        :activeButton="selectedSummary?.title"
        @click="setActive"
      />
    </div>

    <!-- Display Details of Selected Button -->
    <div v-if="selectedSummary" class="mt-4 p-3 border rounded bg-light">
      <h4 class="text-center">{{ selectedSummary.title }} Summary</h4>
      <p><strong>Actual:</strong> {{ selectedSummary.actualValue }} ({{ selectedSummary.actualLabel }})</p>
      <p><strong>Target:</strong> {{ selectedSummary.targetValue }} ({{ selectedSummary.targetLabel }})</p>
    </div>
  </div>
</template>

<script>
export default {
  components: { SummaryCardButton },
  data() {
    return {
      selectedSummary: null,
      summaryTypes: [
        { title: "Hourly", key: "hourly" },
        { title: "Daily", key: "daily" },
        { title: "Monthly", key: "monthly" },
        { title: "Yearly", key: "yearly" }
      ],
      aggregatedSummaries: this.aggregateSummaries(mock_data) // Assuming this comes from an aggregation method
    };
  },
  methods: {
    // Method to get summary data dynamically based on key
    getSummaryData(key) {
      const summary = this.aggregatedSummaries[key];
      return {
        title: key.charAt(0).toUpperCase() + key.slice(1), // Capitalize first letter for title
        actualValue: summary.actual,
        targetValue: summary.plan,
        actualLabel: `Actual ${key.charAt(0).toUpperCase() + key.slice(1)} to Date`,
        targetLabel: `Target ${key.charAt(0).toUpperCase() + key.slice(1)}`
      };
    },
    setActive(summary) {
      this.selectedSummary = summary;
    }
  }
};
</script>



/// setActive and get current month

<template>
  <div>
    <!-- Button List -->
    <div class="d-flex gap-3">
      <!-- Loop through the summary types (hourly, daily, monthly, yearly) -->
      <SummaryCardButton 
        v-for="(summary, index) in summaryTypes" 
        :key="index"
        :summary="getSummaryData(summary.key)"
        :activeButton="selectedSummary?.title"
        @click="setActive(summary.key)"
      />
    </div>

    <!-- Display Details of Selected Button -->
    <div v-if="selectedSummary" class="mt-4 p-3 border rounded bg-light">
      <h4 class="text-center">{{ selectedSummary.title }} Summary</h4>
      <p><strong>Actual:</strong> {{ selectedSummary.actualValue }} ({{ selectedSummary.actualLabel }})</p>
      <p><strong>Target:</strong> {{ selectedSummary.targetValue }} ({{ selectedSummary.targetLabel }})</p>
    </div>
  </div>
</template>

<script>
export default {
  components: { SummaryCardButton },
  data() {
    return {
      selectedSummary: null,
      summaryTypes: [
        { title: "Hourly", key: "hourly" },
        { title: "Daily", key: "daily" },
        { title: "Monthly", key: "monthly" },
        { title: "Yearly", key: "yearly" }
      ],
      aggregatedSummaries: this.aggregateSummaries(mock_data), // Assuming this comes from an aggregation method
    };
  },
  methods: {
    // Method to get summary data dynamically based on key
    getSummaryData(key) {
      const summary = this.aggregatedSummaries[key];
      return {
        title: key.charAt(0).toUpperCase() + key.slice(1), // Capitalize first letter for title
        actualValue: this.getActualValue(key),
        targetValue: summary.plan,
        actualLabel: `Actual ${key.charAt(0).toUpperCase() + key.slice(1)} to Date`,
        targetLabel: `Target ${key.charAt(0).toUpperCase() + key.slice(1)}`
      };
    },
    // Method to filter and get actual value for the selected period (monthly, hourly, etc.)
    getActualValue(key) {
      const summary = this.aggregatedSummaries[key];
      if (key === 'monthly') {
        // Assuming your aggregated data for monthly includes month-wise values
        return this.filterByCurrentMonth(summary.actual);
      }
      // Other cases (e.g., hourly, daily) can be similarly adjusted
      return summary.actual;
    },
    // Filter data for the current month (or adjust for other time periods)
    filterByCurrentMonth(actualData) {
      const currentMonth = new Date().getMonth(); // Get current month (0-11)
      // Assuming actualData is an array with month-wise data
      return actualData[currentMonth] || 0; // Return the value for the current month or 0 if not available
    },
    // Set the active summary and filter data accordingly
    setActive(key) {
      this.selectedSummary = this.getSummaryData(key);
    }
  }
};
</script>



##############################33333 AGGREGATE DATA based on current

<template>
  <div>
    <!-- Button List -->
    <div class="d-flex gap-3">
      <!-- Loop through the summary types (hourly, daily, monthly, yearly) -->
      <SummaryCardButton 
        v-for="(summary, index) in summaryTypes" 
        :key="index"
        :summary="getSummaryData(summary.key)"
        :activeButton="selectedSummary?.title"
        @click="setActive(summary.key)"
      />
    </div>

    <!-- Display Details of Selected Button -->
    <div v-if="selectedSummary" class="mt-4 p-3 border rounded bg-light">
      <h4 class="text-center">{{ selectedSummary.title }} Summary</h4>
      <p><strong>Actual:</strong> {{ selectedSummary.actualValue }} ({{ selectedSummary.actualLabel }})</p>
      <p><strong>Target:</strong> {{ selectedSummary.targetValue }} ({{ selectedSummary.targetLabel }})</p>
    </div>
  </div>
</template>

<script>
export default {
  components: { SummaryCardButton },
  data() {
    return {
      selectedSummary: null,
      summaryTypes: [
        { title: "Hourly", key: "hourly" },
        { title: "Daily", key: "daily" },
        { title: "Monthly", key: "monthly" },
        { title: "Yearly", key: "yearly" }
      ],
      aggregatedSummaries: this.aggregateSummaries(mock_data), // Assuming this comes from an aggregation method
    };
  },
  methods: {
    // Aggregate the data by different time periods: hourly, daily, monthly, yearly
    aggregateSummaries(data) {
      const hourlyData = {};
      const dailyData = {};
      const monthlyData = {};
      const yearlyData = {};

      data.forEach(item => {
        const date = new Date(item.datetime);
        const hour = date.getHours();
        const day = date.getDate();
        const month = date.getMonth();
        const year = date.getFullYear();

        // Hourly data
        const hourKey = `${year}-${month + 1}-${day} ${hour}:00`;
        if (!hourlyData[hourKey]) {
          hourlyData[hourKey] = { actual: 0, plan: 0 };
        }
        hourlyData[hourKey].actual += item.actual;
        hourlyData[hourKey].plan += item.plan;

        // Daily data
        const dailyKey = `${year}-${month + 1}-${day}`;
        if (!dailyData[dailyKey]) {
          dailyData[dailyKey] = { actual: 0, plan: 0 };
        }
        dailyData[dailyKey].actual += item.actual;
        dailyData[dailyKey].plan += item.plan;

        // Monthly data
        const monthlyKey = `${year}-${month + 1}`;
        if (!monthlyData[monthlyKey]) {
          monthlyData[monthlyKey] = { actual: 0, plan: 0 };
        }
        monthlyData[monthlyKey].actual += item.actual;
        monthlyData[monthlyKey].plan += item.plan;

        // Yearly data
        const yearlyKey = `${year}`;
        if (!yearlyData[yearlyKey]) {
          yearlyData[yearlyKey] = { actual: 0, plan: 0 };
        }
        yearlyData[yearlyKey].actual += item.actual;
        yearlyData[yearlyKey].plan += item.plan;
      });

      return {
        hourly: hourlyData,
        daily: dailyData,
        monthly: monthlyData,
        yearly: yearlyData,
      };
    },

    // Method to get summary data dynamically based on key
    getSummaryData(key) {
      const summary = this.aggregatedSummaries[key];
      const currentKey = this.getCurrentKey(key);

      return {
        title: key.charAt(0).toUpperCase() + key.slice(1), // Capitalize first letter for title
        actualValue: summary[currentKey]?.actual || 0,
        targetValue: summary[currentKey]?.plan || 0,
        actualLabel: `Actual ${key.charAt(0).toUpperCase() + key.slice(1)} to Date`,
        targetLabel: `Target ${key.charAt(0).toUpperCase() + key.slice(1)}`,
      };
    },

    // Determine the current key based on the selected time period
    getCurrentKey(key) {
      const currentDate = new Date();
      const year = currentDate.getFullYear();
      const month = currentDate.getMonth() + 1; // Months are 0-indexed
      const day = currentDate.getDate();
      const hour = currentDate.getHours();

      switch (key) {
        case "hourly":
          return `${year}-${month}-${day} ${hour}:00`; // Current hour key
        case "daily":
          return `${year}-${month}-${day}`; // Current day key
        case "monthly":
          return `${year}-${month}`; // Current month key
        case "yearly":
          return `${year}`; // Current year key
        default:
          return "";
      }
    },

    // Set the active summary and filter data accordingly
    setActive(key) {
      this.selectedSummary = this.getSummaryData(key);
    }
  }
};
</script>

